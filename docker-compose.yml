version: "3"

services:

  pg:
    image: postgres:9.5-alpine
    restart: always
    environment:
      - POSTGRES_PASSWORD=test
      - POSTGRES_USER=test
      - POSTGRES_DB=test
    volumes:
      - postgres_volume:/var/lib/postgresql/data

  web:
    build:
      context: .
      args:
        - http_proxy=${http_proxy}
        - https_proxy=${https_proxy}
    environment:
      - http_proxy=${http_proxy}
      - https_proxy=${https_proxy}
      - PG_HOST=pg
      - PG_PORT=5432
    depends_on:
      - pg
    restart: on-failure
    ports:
      - 8000:8000
    command: python manage.py runserver 0.0.0.0:8000

  bg-tasks:
    build:
      context: .
      args:
        - http_proxy=${http_proxy}
        - https_proxy=${https_proxy}
    environment:
      - http_proxy=${http_proxy}
      - https_proxy=${https_proxy}
      - PG_HOST=pg
      - PG_PORT=5432
    depends_on:
      - pg
      - web
    restart: on-failure
    entrypoint: ""
    command: dockerize -wait tcp://web:8000 -timeout 60s -- python manage.py process_tasks -v=3 --log-std


volumes:
  postgres_volume:
